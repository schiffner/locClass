% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FLXMCLlda.R
\docType{methods}
\name{FLXMCLlda}
\alias{FLXMCLlda}
\alias{FLXgetModelmatrix,FLXMCLlda-method}
\title{Mixtures of Linear Discriminant Analysis Models}
\usage{
FLXMCLlda(formula = . ~ ., ...)

\S4method{FLXgetModelmatrix}{FLXMCLlda}(model, data, formula, lhs = TRUE, ...)
}
\arguments{
\item{formula}{A formula which is interpreted relative to the formula specified in the call to \code{\link[flexmix]{flexmix}} using \code{\link[stats]{update.formula}}. 
Only the left-hand side (response) of the formula is used. Default is to use the original \code{\link[flexmix]{flexmix}} model formula.}

\item{\dots}{Further arguments to and from other methods, especially \code{\link{wlda}}.}
}
\value{
Returns an object of class \code{FLXMCLlda} inheriting from \code{FLXMCL}.
}
\description{
This is a model driver for \code{\link[flexmix]{flexmix}} from package \pkg{flexmix} implementing mixtures of Linear Discriminant Analysis Models.
}
\note{
This method internally calls function \code{\link{wlda}}. \code{method = "ML"} is hard-coded.
}
\examples{
library(benchData)
data <- flashData(1000)
x1 <- seq(-6,6,0.2)
x2 <- seq(-4,4,0.2)
grid <- expand.grid(x.1 = x1, x.2 = x2)

cluster <- kmeans(data$x, center = 2)$cluster
model <- FLXMCLlda()
fit <- flexmix(y ~ ., data = as.data.frame(data), model = model, cluster = cluster, control = list(verb = 1))

## prediction for single component models without aggregation
pred.grid <- predict(fit, newdata = grid)

# joint density of predictors and class variable for class 1
image(x1, x2, matrix(pred.grid[[1]][,1], length(x1)))
contour(x1, x2, matrix(pred.grid[[1]][,1], length(x1)), add = TRUE)
points(data$x, pch = as.character(data$y))

image(x1, x2, matrix(pred.grid[[2]][,1], length(x1)))
contour(x1, x2, matrix(pred.grid[[2]][,1], length(x1)), add = TRUE)
points(data$x, pch = as.character(data$y))

# posterior probability of class 1
pred.grid <- lapply(pred.grid, function(x) x/rowSums(x))
image(x1, x2, matrix(pred.grid[[1]][,1], length(x1)))
contour(x1, x2, matrix(pred.grid[[1]][,1], length(x1)), add = TRUE)
points(data$x, pch = as.character(data$y))

image(x1, x2, matrix(pred.grid[[2]][,1], length(x1)))
contour(x1, x2, matrix(pred.grid[[2]][,1], length(x1)), add = TRUE)
points(data$x, pch = as.character(data$y))

## prediction with aggregation depending on membership in mixture components
pred.grid <- mypredict(fit, newdata = grid, aggregate = TRUE)

# joint density of predictors and class variable for class 1
image(x1, x2, matrix(pred.grid[[1]][,1], length(x1)))
contour(x1, x2, matrix(pred.grid[[1]][,1], length(x1)), add  = TRUE)
points(data$x, pch = as.character(data$y))

# posterior of class 1
pred.grid <- lapply(pred.grid, function(x) x/rowSums(x))
image(x1, x2, matrix(pred.grid[[1]][,1], length(x1)))
contour(x1, x2, matrix(pred.grid[[1]][,1], length(x1)), add  = TRUE)
points(data$x, pch = as.character(data$y))

## local membership
grid <- cbind(y = flashBayesClass(grid), grid)
loc.grid <- posterior(fit, newdata = grid)
contour(x1, x2, matrix(loc.grid[,1], length(x1)), add  = TRUE)
}
\seealso{
Other mixtures lda: \code{\link{FLXMCL-class}}

Other mixtures lda: \code{\link{FLXMCL-class}}
}

