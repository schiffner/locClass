% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FLXMCLnnet.R
\docType{methods}
\name{FLXMCLnnet}
\alias{FLXMCLnnet}
\alias{FLXgetModelmatrix,FLXMCLnnet-method}
\title{Mixtures of Neural Networks}
\usage{
FLXMCLnnet(formula = . ~ ., size, reps = 1, skip = FALSE, Wts = NULL,
  ...)

\S4method{FLXgetModelmatrix}{FLXMCLnnet}(model, data, formula, lhs = TRUE,
  ...)
}
\arguments{
\item{formula}{A formula which is interpreted relative to the formula specified in the call to \code{\link[flexmix]{flexmix}} using \code{\link[stats]{update.formula}}.
Only the left-hand side (response) of the formula is used. Default is to use the original \code{\link[flexmix]{flexmix}} model formula.}

\item{size}{Size of hidden layer, see \code{\link[nnet]{nnet}}.}

\item{reps}{Neural networks are fitted repeatedly (\code{reps} times) for different initial values and the solution with largest likelihood
value is kept. Defaults to 1. (\code{reps} larger one does not make sense if \code{Wts} is specified.)}

\item{skip}{Logical. Should the neural net include skip layer connections? Defaults to \code{FALSE}, see also \code{\link[nnet]{nnet}}.}

\item{Wts}{Initial parameter vector. For convenience and since number of nodes in networks can vary, \code{Wts} does not need to be of correct length.
\code{Wts} should be a rather long vector. Depending on the number of nodes and connections in the network it is recycled or only a subset is used.}

\item{\dots}{Further arguments to and from other methods, especially to \code{\link[nnet]{nnet}}.}
}
\value{
Returns an object of class \code{FLXMCLnnet} inheriting from \code{FLXMCL}.
}
\description{
This is a model driver for \code{\link[flexmix]{flexmix}} implementing mixtures of Neural Netowrks.
}
\examples{
library(benchData)
data <- flashData(1000)
data$x <- scale(data$x)
grid <- expand.grid(x.1=seq(-6,6,0.2), x.2=seq(-4,4,0.2))

cluster <- kmeans(data$x, center = 2)$cluster
model <- FLXMCLnnet(size = 1, trace = TRUE, reps = 5, decay = 0.1)
fit <- flexmix(y ~ ., data = as.data.frame(data), concomitant = FLXPmultinom(~ x.1 + x.2), model = model, cluster = cluster)

## prediction for single component models without aggregation
pred.grid <- predict(fit, newdata = grid)
image(seq(-6,6,0.2), seq(-4,4,0.2), matrix(pred.grid[[1]][,1], length(seq(-6,6,0.2))))
contour(seq(-6,6,0.2), seq(-4,4,0.2), matrix(pred.grid[[1]][,1], length(seq(-6,6,0.2))), add = TRUE)
points(data$x, pch = as.character(data$y))

image(seq(-6,6,0.2), seq(-4,4,0.2), matrix(pred.grid[[2]][,1], length(seq(-6,6,0.2))))
contour(seq(-6,6,0.2), seq(-4,4,0.2), matrix(pred.grid[[2]][,1], length(seq(-6,6,0.2))), add = TRUE)
points(data$x, pch = as.character(data$y))

## prediction with aggregation depending on membership in mixture components
pred.grid <- mypredict(fit, newdata = grid, aggregate = TRUE)
image(seq(-6,6,0.2), seq(-4,4,0.2), matrix(pred.grid[[1]][,1], length(seq(-6,6,0.2))))
contour(seq(-6,6,0.2), seq(-4,4,0.2), matrix(pred.grid[[1]][,1], length(seq(-6,6,0.2))), add  = TRUE)
points(data$x, pch = as.character(data$y))

## local membership
loc.grid <- prior(fit, newdata = grid)
contour(seq(-6,6,0.2), seq(-4,4,0.2), matrix(loc.grid[,1], length(seq(-6,6,0.2))), add  = TRUE)
}
\seealso{
Other mixtures nnet: \code{\link{FLXMCL-class}}

Other mixtures nnet: \code{\link{FLXMCL-class}}
}

